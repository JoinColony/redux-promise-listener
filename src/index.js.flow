// @flow
import type { Store, Middleware } from 'redux'

export type State = any
export type Action = { type: string, payload?: any, meta?: any }
export type Next = Action => State
export type SetPayload = (Action, any) => Action
export type GetPayload = Action => ?any
export type ActionMatcher = Action => boolean
export type Config = {
  start: string | (({ payload?: any, meta?: any }) => Action),
  resolve: string | ActionMatcher,
  reject: string | ActionMatcher,
  setPayload?: SetPayload,
  getPayload?: GetPayload,
  getError?: GetPayload
}
export type AsyncFunction = {
  asyncFunction: any => Promise<any>,
  unsubscribe: () => void
}
export type PromiseListener = {
  middleware: Middleware<State, Action>,
  createAsyncFunction: Config => AsyncFunction
}

declare export default function createListener(): PromiseListener
